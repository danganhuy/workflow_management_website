import React, { useState } from "react";
import {
    Dialog,
    DialogTitle,
    DialogContent,
    TextField,
    DialogActions,
    Select,
    MenuItem as MuiMenuItem,
    Button,
} from "@mui/material";
import axios from "axios";

const BoardForm = ({ open, onClose, onBoardCreated, groupId }) => {
    const [boardTitle, setBoardTitle] = useState("");
    const [boardType, setBoardType] = useState("private");

    const handleCreateBoard = async () => {
        if (!boardTitle.trim()) {
            alert("‚ö†Ô∏è Ti√™u ƒë·ªÅ b·∫£ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
            return;
        }

        if (!groupId) {
            alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn nh√≥m tr∆∞·ªõc khi t·∫°o b·∫£ng!");
            console.error("‚ùå L·ªói: Kh√¥ng c√≥ groupId, kh√¥ng th·ªÉ t·∫°o b·∫£ng!");
            return;
        }

        try {
            // üìå C·∫•u tr√∫c d·ªØ li·ªáu g·ª≠i l√™n API
            const payload = {
                name: boardTitle,
                type: boardType,
                group: { id: groupId }  // G·ª≠i groupId d∆∞·ªõi d·∫°ng ƒë·ªëi t∆∞·ª£ng nh√≥m, kh√¥ng ph·∫£i gi√° tr·ªã id
            };

            console.log("üì§ G·ª≠i request t·∫°o b·∫£ng:", JSON.stringify(payload, null, 2));

            const response = await axios.post("http://localhost:8080/api/boards", payload, {
                headers: { "Content-Type": "application/json" }
            });

            console.log("‚úÖ API tr·∫£ v·ªÅ:", response.data);

            if (onBoardCreated) {
                onBoardCreated(response.data);
            } else {
                console.warn("‚ö†Ô∏è onBoardCreated kh√¥ng t·ªìn t·∫°i!");
            }

            handleClose();
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫°o b·∫£ng:", error.response?.data || error.message);

            // üö® Hi·ªÉn th·ªã l·ªói chi ti·∫øt
            alert(`L·ªói khi t·∫°o b·∫£ng: ${JSON.stringify(error.response?.data, null, 2)}`);
        }
    };





    const handleClose = () => {
        setBoardTitle("");
        setBoardType("private");
        onClose();
    };

    return (
        <Dialog open={open} onClose={handleClose}>
            <DialogTitle>T·∫°o B·∫£ng M·ªõi</DialogTitle>
            <DialogContent>
                <TextField
                    autoFocus
                    margin="dense"
                    label="Ti√™u ƒë·ªÅ"
                    fullWidth
                    required
                    value={boardTitle}
                    onChange={(e) => setBoardTitle(e.target.value)}
                />
                <Select fullWidth value={boardType} onChange={(e) => setBoardType(e.target.value)} sx={{ mt: 2 }}>
                    <MuiMenuItem value="private">Ri√™ng t∆∞</MuiMenuItem>
                    <MuiMenuItem value="group">Nh√≥m</MuiMenuItem>
                    <MuiMenuItem value="public">C√¥ng khai</MuiMenuItem>
                </Select>
            </DialogContent>
            <DialogActions>
                <Button onClick={handleClose} color="secondary">H·ªßy</Button>
                <Button onClick={handleCreateBoard} color="primary">T·∫°o M·ªõi</Button>
            </DialogActions>
        </Dialog>
    );
};

export default BoardForm;
